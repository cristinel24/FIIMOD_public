import * as mime from 'mime-types';
import { URL } from 'url';
const isValidUrl = (url) => {
    try {
        const u = new URL(url);
        return u.protocol === "http:" || u.protocol === "https:";
    }
    catch (_) {
        return false;
    }
};
/**
 * Returns true if the HTML node is an element.
 * @param node HTML node
 */
export const isElementNode = (node) => node.nodeType === 1;
/**
 * Extract base URL from headers of a DOM.
 * @param doc DOM to process
 * @returns the base URL
 */
export function extractBaseUrl(doc) {
    let result = null;
    if (!doc.head) {
        return result;
    }
    const $base = doc.head.getElementsByTagName('base')[0];
    if ($base && $base.hasAttribute('href')) {
        let baseUrl = $base.getAttribute('href') || '';
        if (/^\/\//i.test(baseUrl)) {
            baseUrl = 'http:' + baseUrl;
        }
        if (isValidUrl(baseUrl)) {
            result = baseUrl;
        }
    }
    return result;
}
/**
 * Extract Open Graph properties from headers of a DOM.
 * @param doc DOM to process
 * @returns Open Graph properties
 */
export function extractOpenGraphProps(doc) {
    const result = {};
    if (!doc.head) {
        return result;
    }
    const $metas = Array.from(doc.head.getElementsByTagName('meta'));
    for (const $meta of $metas) {
        const attr = $meta.getAttribute('property');
        if (attr !== null && attr.startsWith('og:')) {
            const prop = attr.substr(3);
            result[prop] = $meta.getAttribute('content');
        }
        if (!isValidUrl(result.url)) {
            result.url = null;
        }
    }
    return result;
}
/**
 * Extract all images from a DOM.
 * @param doc DOM to process
 * @param illustration if provided, the illustration is added to the result
 * @returns array of image meta data
 */
export function extractImages(doc, illustration) {
    const result = [];
    if (illustration) {
        // Add document Open Graph illustration in first position
        // This in order to be the document illustration.
        result.push({
            src: illustration,
            contentType: mime.lookup(illustration) || '',
        });
    }
    const $images = Array.from(doc.getElementsByTagName('img'));
    for (const $img of $images) {
        if ($img.hasAttribute('src')) {
            const src = $img.getAttribute('src');
            if (src && !/^data:/i.test(src)) {
                result.push({
                    src,
                    contentType: mime.lookup(src) || '',
                });
            }
        }
    }
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxJQUFJLE1BQU0sWUFBWSxDQUFBO0FBQ2xDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxLQUFLLENBQUE7QUFFekIsTUFBTSxVQUFVLEdBQUcsQ0FBQyxHQUFXLEVBQUUsRUFBRTtJQUNqQyxJQUFJO1FBQ0YsTUFBTyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDdkIsT0FBTyxDQUFDLENBQUMsUUFBUSxLQUFLLE9BQU8sSUFBSSxDQUFDLENBQUMsUUFBUSxLQUFLLFFBQVEsQ0FBQTtLQUN6RDtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsT0FBTyxLQUFLLENBQUE7S0FDYjtBQUNILENBQUMsQ0FBQTtBQUVEOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUFDLElBQWEsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUE7QUFFbkU7Ozs7R0FJRztBQUNILE1BQU0sVUFBVSxjQUFjLENBQUMsR0FBYTtJQUMxQyxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUE7SUFDakIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUU7UUFDYixPQUFPLE1BQU0sQ0FBQTtLQUNkO0lBQ0QsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUN0RCxJQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQ3ZDLElBQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFBO1FBQzlDLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUMxQixPQUFPLEdBQUcsT0FBTyxHQUFHLE9BQU8sQ0FBQTtTQUM1QjtRQUNELElBQUksVUFBVSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ3ZCLE1BQU0sR0FBRyxPQUFPLENBQUE7U0FDakI7S0FDRjtJQUNELE9BQU8sTUFBTSxDQUFBO0FBQ2YsQ0FBQztBQU9EOzs7O0dBSUc7QUFDSCxNQUFNLFVBQVUscUJBQXFCLENBQUMsR0FBYTtJQUNqRCxNQUFNLE1BQU0sR0FBbUIsRUFBRSxDQUFBO0lBQ2pDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFO1FBQ2IsT0FBTyxNQUFNLENBQUE7S0FDZDtJQUNELE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFBO0lBQ2hFLEtBQUssTUFBTSxLQUFLLElBQUksTUFBTSxFQUFFO1FBQzFCLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDM0MsSUFBSSxJQUFJLEtBQUssSUFBSSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDM0MsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUMzQixNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQTtTQUM3QztRQUNELElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQzNCLE1BQU0sQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFBO1NBQ2xCO0tBQ0Y7SUFDRCxPQUFPLE1BQU0sQ0FBQTtBQUNmLENBQUM7QUFPRDs7Ozs7R0FLRztBQUNILE1BQU0sVUFBVSxhQUFhLENBQUMsR0FBYSxFQUFFLFlBQXFCO0lBQ2hFLE1BQU0sTUFBTSxHQUFnQixFQUFFLENBQUE7SUFDOUIsSUFBSSxZQUFZLEVBQUU7UUFDaEIseURBQXlEO1FBQ3pELGlEQUFpRDtRQUNqRCxNQUFNLENBQUMsSUFBSSxDQUFDO1lBQ1YsR0FBRyxFQUFFLFlBQVk7WUFDakIsV0FBVyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRTtTQUM3QyxDQUFDLENBQUE7S0FDSDtJQUNELE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUE7SUFDM0QsS0FBSyxNQUFNLElBQUksSUFBSSxPQUFPLEVBQUU7UUFDMUIsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzVCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUE7WUFDcEMsSUFBSSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUMvQixNQUFNLENBQUMsSUFBSSxDQUFDO29CQUNWLEdBQUc7b0JBQ0gsV0FBVyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRTtpQkFDcEMsQ0FBQyxDQUFBO2FBQ0g7U0FDRjtLQUNGO0lBQ0QsT0FBTyxNQUFNLENBQUE7QUFDZixDQUFDIn0=