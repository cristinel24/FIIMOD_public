import createDOMPurify from 'dompurify';
import { JSDOM } from 'jsdom';
import { parse, resolve } from 'url';
import { isElementNode } from './helpers';
/**
 * Remove all blacklisted attributes from a HTML element.
 * @param blacklist the list of attributes to remove
 * @returns the filtering function
 */
function removeAttributes(blacklist) {
    return (node) => {
        if (isElementNode(node)) {
            blacklist.forEach((attr) => node.hasAttribute(attr) && node.removeAttribute(attr));
        }
    };
}
/**
 * Remove a image that can be a tracker (1px square).
 * @returns the filtering function
 */
function removeImageTracker() {
    return (node) => {
        if (node.tagName === 'IMG' && (node.hasAttribute('height') || node.hasAttribute('width'))) {
            const height = node.getAttribute('height');
            const width = node.getAttribute('width');
            if (height === '1' && width === '1' && node.parentNode) {
                node.parentNode.removeChild(node);
            }
        }
    };
}
/**
 * Delete all HTML elements that refer to a blocked host.
 * @param isBlockedHost function to control if the hostname is blocked
 * @returns the filtering function
 */
function removeBlockedHostLinks(isBlockedHost) {
    return (node) => {
        if (isElementNode(node) && (node.hasAttribute('src') || node.hasAttribute('href'))) {
            const src = node.getAttribute('src') || node.getAttribute('href');
            if (src) {
                const hostname = parse(src).hostname || 'undefined';
                if (isBlockedHost(hostname) && node.parentNode) {
                    node.parentNode.removeChild(node);
                }
            }
        }
    };
}
/**
 * Update link to target new blank window.
 * @returns the filtering function
 */
function externalizeLinks() {
    return (node) => {
        if (node.tagName === 'A' && node.hasAttribute('href')) {
            node.setAttribute('target', '_blank');
            node.setAttribute('rel', 'noopener noreferrer');
        }
    };
}
/**
 * Update relative link to be absolute.
 * @param baseURL the base URL used to make the link absolute
 * @returns the filtering function
 */
function rebaseSrcAttribute(baseURL) {
    const absoluteUrlRe = new RegExp('^https?://');
    return (node) => {
        if (isElementNode(node)) {
            const attr = node.hasAttribute('src') ? 'src' : node.hasAttribute('href') ? 'href' : null;
            if (attr) {
                const src = node.getAttribute(attr);
                if (src && !absoluteUrlRe.test(src)) {
                    node.setAttribute(attr, resolve(baseURL, src));
                }
            }
        }
    };
}
function addLazyLoadingAttribute() {
    return (node) => {
        if (node.nodeName === 'IFRAME' || node.nodeName === 'IMG') {
            node.setAttribute('loading', 'lazy');
        }
    };
}
function rewriteSrcAttribute(rewriteURL) {
    return (node) => {
        if (isElementNode(node) && node.hasAttribute('src')) {
            const value = node.getAttribute('src');
            if (value) {
                node.setAttribute('src', rewriteURL(value));
            }
        }
    };
}
const DefaultFilterChain = [
    removeAttributes(['id', 'class']),
    removeImageTracker(),
    externalizeLinks(),
    addLazyLoadingAttribute(),
];
/**
 * Clean a DOM using a filter chain.
 * @param doc DOM to clean
 * @param props properties used by filters
 * @param filters chain filter
 */
export function sanitize(html, props) {
    const window = new JSDOM('<!DOCTYPE html>').window;
    const purify = createDOMPurify(window);
    let filters = [...DefaultFilterChain, props.filters];
    if (props.baseURL) {
        filters.push(rebaseSrcAttribute(props.baseURL));
    }
    if (props.isBlockedHost) {
        filters = [removeBlockedHostLinks(props.isBlockedHost), ...filters];
    }
    if (props.rewriteURL) {
        filters = [rewriteSrcAttribute(props.rewriteURL), ...filters];
    }
    filters.forEach((filter) => purify.addHook('beforeSanitizeElements', filter));
    return purify.sanitize(html, {
        ADD_ATTR: ['target'],
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuaXRpemUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2FuaXRpemUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxlQUFlLE1BQU0sV0FBVyxDQUFBO0FBQ3ZDLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxPQUFPLENBQUE7QUFDN0IsT0FBTyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsTUFBTSxLQUFLLENBQUE7QUFHcEMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFdBQVcsQ0FBQTtBQWN6Qzs7OztHQUlHO0FBQ0gsU0FBUyxnQkFBZ0IsQ0FBQyxTQUE0QjtJQUNwRCxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUU7UUFDZCxJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN2QixTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtTQUNuRjtJQUNILENBQUMsQ0FBQTtBQUNILENBQUM7QUFFRDs7O0dBR0c7QUFDSCxTQUFTLGtCQUFrQjtJQUN6QixPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUU7UUFDZCxJQUFJLElBQUksQ0FBQyxPQUFPLEtBQUssS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUU7WUFDekYsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQTtZQUMxQyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1lBQ3hDLElBQUksTUFBTSxLQUFLLEdBQUcsSUFBSSxLQUFLLEtBQUssR0FBRyxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7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