import { JSDOM } from 'jsdom';
import { Readability } from '@mozilla/readability';
import fetch, { Headers, Request } from 'node-fetch';
import pretty from 'pretty';
import { URL } from 'url';
import { isBlockedHost as defaultIsBlockedHost } from './blocked-host';
import { extractBaseUrl, extractImages, extractOpenGraphProps, isElementNode } from './helpers';
import { sanitize } from './sanitize';
import { DefaultRules } from './rules';
const DefaultConfig = {
    debug: false,
    pretty: false,
    headers: new Headers({
        'User-Agent': 'Mozilla/5.0 (compatible; HTMLGrabr/1.0)',
    }),
    rules: DefaultRules,
    isBlockedHost: defaultIsBlockedHost,
};
export class HTMLGrabr {
    constructor(config = {}) {
        this.config = { ...DefaultConfig, ...config };
    }
    /**
     * Grabs the content of a page from HTML content.
     * @param content a string that contains HTML code
     * @param baseURL a string that contains HTML base URL
     * @returns a page object
     */
    async grab(content, baseURLFallback) {
        const { debug, isBlockedHost, rewriteURL } = this.config;
        // Load content into a virtual DOM
        const dom = new JSDOM(content, {
            url: baseURLFallback,
        });
        const doc = dom.window.document;
        // Apply rule if exists
        if (baseURLFallback) {
            const { hostname } = new URL(baseURLFallback);
            const redirect = this.applyRules(hostname.replace(/^(www\.)/, ""), doc);
            if (redirect) {
                return this.grabUrl(redirect);
            }
        }
        // Extract base URL
        const baseURL = extractBaseUrl(doc) || baseURLFallback;
        // Extract Open Graph properties
        const ogProps = extractOpenGraphProps(doc);
        // Extract images
        const images = extractImages(doc, ogProps.image);
        // Use Readability.js to extract HTML content
        const reader = new Readability(doc, { debug });
        const article = reader.parse();
        if (debug) {
            console.log('article after Readability parsing:', article);
        }
        // Sanitize content
        let html = sanitize(article.content, { baseURL, debug, isBlockedHost, rewriteURL });
        if (debug) {
            console.log('HTML content after sanitization:', html);
        }
        if (this.config.pretty) {
            html = pretty(html, { ocd: true });
        }
        return {
            title: ogProps.title || article.title,
            url: ogProps.url || baseURL,
            image: ogProps.image,
            html,
            text: article.textContent,
            excerpt: article.excerpt,
            length: article.length,
            images,
        };
    }
    /**
     * Grabs the content of a remote HTML page.
     * @param url the URL to fetch and process
     * @returns a page object
     */
    async grabUrl(url) {
        let req = new Request(url.toString(), {
            headers: this.config.headers,
            method: 'HEAD'
        });
        let res = await fetch(req);
        if (!res.ok) {
            throw new Error(`bad status response: ${res.statusText}`);
        }
        const contentType = res.headers.get('Content-Type');
        if (!contentType.startsWith('text/html')) {
            throw new Error(`unsupported content type: ${contentType}`);
        }
        req = new Request(url.toString(), {
            headers: this.config.headers,
        });
        res = await fetch(req);
        if (!res.ok) {
            throw new Error(`bad status response: ${res.statusText}`);
        }
        const body = await res.text();
        return this.grab(body, url.toString());
    }
    applyRules(hostname, doc) {
        if (!this.config.rules.has(hostname)) {
            return null;
        }
        const rule = this.config.rules.get(hostname);
        const node = doc.querySelector(rule.selector);
        if (node && isElementNode(node)) {
            if (rule.type === 'redirect' && (node.hasAttribute('src') || node.hasAttribute('href'))) {
                const src = node.getAttribute('src') || node.getAttribute('href');
                return new URL(src);
            }
            else {
                doc.body.childNodes.forEach((n) => n.remove());
                doc.body.prepend(node);
            }
        }
        return null;
    }
}
export default HTMLGrabr;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHRtbGdyYWJyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2h0bWxncmFici50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sT0FBTyxDQUFBO0FBQzdCLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQTtBQUNsRCxPQUFPLEtBQUssRUFBRSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxZQUFZLENBQUE7QUFDcEQsT0FBTyxNQUFNLE1BQU0sUUFBUSxDQUFBO0FBQzNCLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxLQUFLLENBQUE7QUFFekIsT0FBTyxFQUF1QixhQUFhLElBQUksb0JBQW9CLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQTtBQUMzRixPQUFPLEVBQUUsY0FBYyxFQUFFLGFBQWEsRUFBRSxxQkFBcUIsRUFBYSxhQUFhLEVBQUUsTUFBTSxXQUFXLENBQUE7QUFDMUcsT0FBTyxFQUFFLFFBQVEsRUFBbUIsTUFBTSxZQUFZLENBQUE7QUFDdEQsT0FBTyxFQUFFLFlBQVksRUFBUSxNQUFNLFNBQVMsQ0FBQTtBQXNCNUMsTUFBTSxhQUFhLEdBQWtCO0lBQ25DLEtBQUssRUFBRSxLQUFLO0lBQ1osTUFBTSxFQUFFLEtBQUs7SUFDYixPQUFPLEVBQUUsSUFBSSxPQUFPLENBQUM7UUFDbkIsWUFBWSxFQUFFLHlDQUF5QztLQUN4RCxDQUFDO0lBQ0YsS0FBSyxFQUFFLFlBQVk7SUFDbkIsYUFBYSxFQUFFLG9CQUFvQjtDQUNwQyxDQUFBO0FBRUQsTUFBTSxPQUFPLFNBQVM7SUFHcEIsWUFBWSxTQUF3QixFQUFFO1FBQ3BDLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxHQUFHLGFBQWEsRUFBRSxHQUFHLE1BQU0sRUFBRSxDQUFBO0lBQy9DLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBZSxFQUFFLGVBQXdCO1FBQ3pE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