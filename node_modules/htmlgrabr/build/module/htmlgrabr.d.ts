/// <reference types="node" />
import { Headers } from 'node-fetch';
import { URL } from 'url';
import { BlockedHostCtrlFunc } from './blocked-host';
import { ImageMeta } from './helpers';
import { URLRewriterFunc } from './sanitize';
import { Rule } from './rules';
interface GrabberConfig {
    readonly debug?: boolean;
    readonly pretty?: boolean;
    readonly isBlockedHost?: BlockedHostCtrlFunc;
    readonly rewriteURL?: URLRewriterFunc;
    readonly rules?: Map<string, Rule>;
    readonly headers?: Headers;
}
interface GrabbedPage {
    readonly title: string;
    readonly url: string | null;
    readonly image: string | null;
    readonly html: string;
    readonly text: string;
    readonly excerpt: string;
    readonly length: number;
    readonly images: ImageMeta[];
}
export declare class HTMLGrabr {
    readonly config: GrabberConfig;
    constructor(config?: GrabberConfig);
    /**
     * Grabs the content of a page from HTML content.
     * @param content a string that contains HTML code
     * @param baseURL a string that contains HTML base URL
     * @returns a page object
     */
    grab(content: string, baseURLFallback?: string): Promise<GrabbedPage>;
    /**
     * Grabs the content of a remote HTML page.
     * @param url the URL to fetch and process
     * @returns a page object
     */
    grabUrl(url: URL): Promise<GrabbedPage>;
    private applyRules;
}
export default HTMLGrabr;
