"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const dompurify_1 = __importDefault(require("dompurify"));
const jsdom_1 = require("jsdom");
const url_1 = require("url");
const helpers_1 = require("./helpers");
/**
 * Remove all blacklisted attributes from a HTML element.
 * @param blacklist the list of attributes to remove
 * @returns the filtering function
 */
function removeAttributes(blacklist) {
    return (node) => {
        if (helpers_1.isElementNode(node)) {
            blacklist.forEach((attr) => node.hasAttribute(attr) && node.removeAttribute(attr));
        }
    };
}
/**
 * Remove a image that can be a tracker (1px square).
 * @returns the filtering function
 */
function removeImageTracker() {
    return (node) => {
        if (node.tagName === 'IMG' && (node.hasAttribute('height') || node.hasAttribute('width'))) {
            const height = node.getAttribute('height');
            const width = node.getAttribute('width');
            if (height === '1' && width === '1' && node.parentNode) {
                node.parentNode.removeChild(node);
            }
        }
    };
}
/**
 * Delete all HTML elements that refer to a blocked host.
 * @param isBlockedHost function to control if the hostname is blocked
 * @returns the filtering function
 */
function removeBlockedHostLinks(isBlockedHost) {
    return (node) => {
        if (helpers_1.isElementNode(node) && (node.hasAttribute('src') || node.hasAttribute('href'))) {
            const src = node.getAttribute('src') || node.getAttribute('href');
            if (src) {
                const hostname = url_1.parse(src).hostname || 'undefined';
                if (isBlockedHost(hostname) && node.parentNode) {
                    node.parentNode.removeChild(node);
                }
            }
        }
    };
}
/**
 * Update link to target new blank window.
 * @returns the filtering function
 */
function externalizeLinks() {
    return (node) => {
        if (node.tagName === 'A' && node.hasAttribute('href')) {
            node.setAttribute('target', '_blank');
            node.setAttribute('rel', 'noopener noreferrer');
        }
    };
}
/**
 * Update relative link to be absolute.
 * @param baseURL the base URL used to make the link absolute
 * @returns the filtering function
 */
function rebaseSrcAttribute(baseURL) {
    const absoluteUrlRe = new RegExp('^https?://');
    return (node) => {
        if (helpers_1.isElementNode(node)) {
            const attr = node.hasAttribute('src') ? 'src' : node.hasAttribute('href') ? 'href' : null;
            if (attr) {
                const src = node.getAttribute(attr);
                if (src && !absoluteUrlRe.test(src)) {
                    node.setAttribute(attr, url_1.resolve(baseURL, src));
                }
            }
        }
    };
}
function addLazyLoadingAttribute() {
    return (node) => {
        if (node.nodeName === 'IFRAME' || node.nodeName === 'IMG') {
            node.setAttribute('loading', 'lazy');
        }
    };
}
function rewriteSrcAttribute(rewriteURL) {
    return (node) => {
        if (helpers_1.isElementNode(node) && node.hasAttribute('src')) {
            const value = node.getAttribute('src');
            if (value) {
                node.setAttribute('src', rewriteURL(value));
            }
        }
    };
}
const DefaultFilterChain = [
    removeAttributes(['id', 'class']),
    removeImageTracker(),
    externalizeLinks(),
    addLazyLoadingAttribute(),
];
/**
 * Clean a DOM using a filter chain.
 * @param doc DOM to clean
 * @param props properties used by filters
 * @param filters chain filter
 */
function sanitize(html, props) {
    const window = new jsdom_1.JSDOM('<!DOCTYPE html>').window;
    const purify = dompurify_1.default(window);
    let filters = [...DefaultFilterChain, props.filters];
    if (props.baseURL) {
        filters.push(rebaseSrcAttribute(props.baseURL));
    }
    if (props.isBlockedHost) {
        filters = [removeBlockedHostLinks(props.isBlockedHost), ...filters];
    }
    if (props.rewriteURL) {
        filters = [rewriteSrcAttribute(props.rewriteURL), ...filters];
    }
    filters.forEach((filter) => purify.addHook('beforeSanitizeElements', filter));
    return purify.sanitize(html, {
        ADD_ATTR: ['target'],
    });
}
exports.sanitize = sanitize;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuaXRpemUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2FuaXRpemUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwwREFBdUM7QUFDdkMsaUNBQTZCO0FBQzdCLDZCQUFvQztBQUdwQyx1Q0FBeUM7QUFjekM7Ozs7R0FJRztBQUNILFNBQVMsZ0JBQWdCLENBQUMsU0FBNEI7SUFDcEQsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFO1FBQ2QsSUFBSSx1QkFBYSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3ZCLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO1NBQ25GO0lBQ0gsQ0FBQyxDQUFBO0FBQ0gsQ0FBQztBQUVEOzs7R0FHRztBQUNILFNBQVMsa0JBQWtCO0lBQ3pCLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRTtRQUNkLElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRTtZQUN6RixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFBO1lBQzFDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUE7WUFDeEMsSUFBSSxNQUFNLEtBQUssR0FBRyxJQUFJLEtBQUssS0FBSyxHQUFHLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtnQkFDdEQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUE7YUFDbEM7U0FDRjtJQUNILENBQUMsQ0FBQTtBQUNILENBQUM7QUFFRDs7OztHQUlHO0FBQ0gsU0FBUyxzQkFBc0IsQ0FBQyxhQUFrQztJQUNoRSxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUU7UUFDZCxJQUFJLHVCQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRTtZQUNsRixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUE7WUFDakUsSUFBSSxHQUFHLEVBQUU7Z0JBQ1AsTUFBTSxRQUFRLEdBQUcsV0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsSUFBSSxXQUFXLENBQUE7Z0JBQ25ELElBQUksYUFBYSxDQUFDLFFBQVEsQ0FBQyxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7b0JBQzlDLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFBO2lCQUNsQzthQUNGO1NBQ0Y7SUFDSCxDQUFDLENBQUE7QUFDSCxDQUFDO0FBRUQ7OztHQUdHO0FBQ0gsU0FBUyxnQkFBZ0I7SUFDdkIsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFO1FBQ2QsSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLEdBQUcsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ3JELElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFBO1lBQ3JDLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLHFCQUFxQixDQUFDLENBQUE7U0FDaEQ7SUFDSCxDQUFDLENBQUE7QUFDSCxDQUFDO0FBRUQ7Ozs7R0FJRztBQUNILFNBQVMsa0JBQWtCLENBQUMsT0FBZTtJQUN6QyxNQUFNLGFBQWEsR0FBRyxJQUFJLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQTtJQUM5QyxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUU7UUFDZCxJQUFJLHVCQUFhLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDdkIsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQTtZQUN6RixJQUFJLElBQUksRUFBRTtnQkFDUixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFBO2dCQUNuQyxJQUFJLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7b0JBQ25DLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLGFBQU8sQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQTtpQkFDL0M7YUFDRjtTQUNGO0lBQ0gsQ0FBQyxDQUFBO0FBQ0gsQ0FBQztBQUVELFNBQVMsdUJBQXVCO0lBQzlCLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRTtRQUNkLElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxRQUFRLElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxLQUFLLEVBQUU7WUFDekQsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUE7U0FDckM7SUFDSCxDQUFDLENBQUE7QUFDSCxDQUFDO0FBRUQsU0FBUyxtQkFBbUIsQ0FBQyxVQUEyQjtJQUN0RCxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUU7UUFDZCxJQUFJLHVCQUFhLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNuRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFBO1lBQ3RDLElBQUksS0FBSyxFQUFFO2dCQUNULElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO2FBQzVDO1NBQ0Y7SUFDSCxDQUFDLENBQUE7QUFDSCxDQUFDO0FBRUQsTUFBTSxrQkFBa0IsR0FBdUI7SUFDN0MsZ0JBQWdCLENBQUMsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDakMsa0JBQWtCLEVBQUU7SUFDcEIsZ0JBQWdCLEVBQUU7SUFDbEIsdUJBQXVCLEVBQUU7Q0FDMUIsQ0FBQTtBQUVEOzs7OztHQUtHO0FBQ0gsU0FBZ0IsUUFBUSxDQUFDLElBQVksRUFBRSxLQUFtQjtJQUN4RCxNQUFNLE1BQU0sR0FBRyxJQUFJLGFBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLE1BQWlCLENBQUE7SUFDN0QsTUFBTSxNQUFNLEdBQUcsbUJBQWUsQ0FBQyxNQUFnQixDQUF5QixDQUFBO0lBRXhFLElBQUksT0FBTyxHQUFHLENBQUMsR0FBRyxrQkFBa0IsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDcEQsSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFO1FBQ2pCLE9BQU8sQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUE7S0FDaEQ7SUFDRCxJQUFJLEtBQUssQ0FBQyxhQUFhLEVBQUU7UUFDdkIsT0FBTyxHQUFHLENBQUMsc0JBQXNCLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxFQUFFLEdBQUcsT0FBTyxDQUFDLENBQUE7S0FDcEU7SUFDRCxJQUFJLEtBQUssQ0FBQyxVQUFVLEVBQUU7UUFDcEIsT0FBTyxHQUFHLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFFLEdBQUcsT0FBTyxDQUFDLENBQUE7S0FDOUQ7SUFFRCxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLHdCQUF3QixFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUE7SUFDN0UsT0FBTyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRTtRQUMzQixRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUM7S0FDckIsQ0FBQyxDQUFBO0FBQ0osQ0FBQztBQW5CRCw0QkFtQkMifQ==