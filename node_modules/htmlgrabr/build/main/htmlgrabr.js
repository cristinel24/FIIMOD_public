"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsdom_1 = require("jsdom");
const readability_1 = require("@mozilla/readability");
const node_fetch_1 = __importStar(require("node-fetch"));
const pretty_1 = __importDefault(require("pretty"));
const url_1 = require("url");
const blocked_host_1 = require("./blocked-host");
const helpers_1 = require("./helpers");
const sanitize_1 = require("./sanitize");
const rules_1 = require("./rules");
const DefaultConfig = {
    debug: false,
    pretty: false,
    headers: new node_fetch_1.Headers({
        'User-Agent': 'Mozilla/5.0 (compatible; HTMLGrabr/1.0)',
    }),
    rules: rules_1.DefaultRules,
    isBlockedHost: blocked_host_1.isBlockedHost,
};
class HTMLGrabr {
    constructor(config = {}) {
        this.config = Object.assign(Object.assign({}, DefaultConfig), config);
    }
    /**
     * Grabs the content of a page from HTML content.
     * @param content a string that contains HTML code
     * @param baseURL a string that contains HTML base URL
     * @returns a page object
     */
    async grab(content, baseURLFallback) {
        const { debug, isBlockedHost, rewriteURL } = this.config;
        // Load content into a virtual DOM
        const dom = new jsdom_1.JSDOM(content, {
            url: baseURLFallback,
        });
        const doc = dom.window.document;
        // Apply rule if exists
        if (baseURLFallback) {
            const { hostname } = new url_1.URL(baseURLFallback);
            const redirect = this.applyRules(hostname.replace(/^(www\.)/, ""), doc);
            if (redirect) {
                return this.grabUrl(redirect);
            }
        }
        // Extract base URL
        const baseURL = helpers_1.extractBaseUrl(doc) || baseURLFallback;
        // Extract Open Graph properties
        const ogProps = helpers_1.extractOpenGraphProps(doc);
        // Extract images
        const images = helpers_1.extractImages(doc, ogProps.image);
        // Use Readability.js to extract HTML content
        const reader = new readability_1.Readability(doc, { debug });
        const article = reader.parse();
        if (debug) {
            console.log('article after Readability parsing:', article);
        }
        // Sanitize content
        let html = sanitize_1.sanitize(article.content, { baseURL, debug, isBlockedHost, rewriteURL });
        if (debug) {
            console.log('HTML content after sanitization:', html);
        }
        if (this.config.pretty) {
            html = pretty_1.default(html, { ocd: true });
        }
        return {
            title: ogProps.title || article.title,
            url: ogProps.url || baseURL,
            image: ogProps.image,
            html,
            text: article.textContent,
            excerpt: article.excerpt,
            length: article.length,
            images,
        };
    }
    /**
     * Grabs the content of a remote HTML page.
     * @param url the URL to fetch and process
     * @returns a page object
     */
    async grabUrl(url) {
        let req = new node_fetch_1.Request(url.toString(), {
            headers: this.config.headers,
            method: 'HEAD'
        });
        let res = await node_fetch_1.default(req);
        if (!res.ok) {
            throw new Error(`bad status response: ${res.statusText}`);
        }
        const contentType = res.headers.get('Content-Type');
        if (!contentType.startsWith('text/html')) {
            throw new Error(`unsupported content type: ${contentType}`);
        }
        req = new node_fetch_1.Request(url.toString(), {
            headers: this.config.headers,
        });
        res = await node_fetch_1.default(req);
        if (!res.ok) {
            throw new Error(`bad status response: ${res.statusText}`);
        }
        const body = await res.text();
        return this.grab(body, url.toString());
    }
    applyRules(hostname, doc) {
        if (!this.config.rules.has(hostname)) {
            return null;
        }
        const rule = this.config.rules.get(hostname);
        const node = doc.querySelector(rule.selector);
        if (node && helpers_1.isElementNode(node)) {
            if (rule.type === 'redirect' && (node.hasAttribute('src') || node.hasAttribute('href'))) {
                const src = node.getAttribute('src') || node.getAttribute('href');
                return new url_1.URL(src);
            }
            else {
                doc.body.childNodes.forEach((n) => n.remove());
                doc.body.prepend(node);
            }
        }
        return null;
    }
}
exports.HTMLGrabr = HTMLGrabr;
exports.default = HTMLGrabr;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHRtbGdyYWJyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2h0bWxncmFici50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSxpQ0FBNkI7QUFDN0Isc0RBQWtEO0FBQ2xELHlEQUFvRDtBQUNwRCxvREFBMkI7QUFDM0IsNkJBQXlCO0FBRXpCLGlEQUEyRjtBQUMzRix1Q0FBMEc7QUFDMUcseUNBQXNEO0FBQ3RELG1DQUE0QztBQXNCNUMsTUFBTSxhQUFhLEdBQWtCO0lBQ25DLEtBQUssRUFBRSxLQUFLO0lBQ1osTUFBTSxFQUFFLEtBQUs7SUFDYixPQUFPLEVBQUUsSUFBSSxvQkFBTyxDQUFDO1FBQ25CLFlBQVksRUFBRSx5Q0FBeUM7S0FDeEQsQ0FBQztJQUNGLEtBQUssRUFBRSxvQkFBWTtJQUNuQixhQUFhLEVBQUUsNEJBQW9CO0NBQ3BDLENBQUE7QUFFRCxNQUFhLFNBQVM7SUFHcEIsWUFBWSxTQUF3QixFQUFFO1FBQ3BDLElBQUksQ0FBQyxNQUFNLG1DQUFRLGFBQWEsR0FBSyxNQUFNLENBQUUsQ0FBQTtJQUMvQyxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSSxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQWUsRUFBRSxlQUF3QjtRQUN6RCxNQUFNLEVBQUUsS0FBSyxFQUFFLGFBQWEsRUFBRSxVQUFVLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFBO1FBRXhELGtDQUFrQztRQUNsQyxNQUFNLEdBQUcsR0FBRyxJQUFJLGFBQUssQ0FBQyxPQUFPLEVBQUU7WUFDN0IsR0FBRyxFQUFFLGVBQWU7U0FDckIsQ0FBQyxDQUFBO1FBQ0YsTUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUE7UUFFL0IsdUJBQXVCO1FBQ3ZCLElBQUksZUFBZSxFQUFFO1lBQ25CLE1BQU0sRUFBRSxRQUFRLEVBQUUsR0FBRyxJQUFJLFNBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQTtZQUM3QyxNQUFN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