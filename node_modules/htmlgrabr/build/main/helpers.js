"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const mime = __importStar(require("mime-types"));
const url_1 = require("url");
const isValidUrl = (url) => {
    try {
        const u = new url_1.URL(url);
        return u.protocol === "http:" || u.protocol === "https:";
    }
    catch (_) {
        return false;
    }
};
/**
 * Returns true if the HTML node is an element.
 * @param node HTML node
 */
exports.isElementNode = (node) => node.nodeType === 1;
/**
 * Extract base URL from headers of a DOM.
 * @param doc DOM to process
 * @returns the base URL
 */
function extractBaseUrl(doc) {
    let result = null;
    if (!doc.head) {
        return result;
    }
    const $base = doc.head.getElementsByTagName('base')[0];
    if ($base && $base.hasAttribute('href')) {
        let baseUrl = $base.getAttribute('href') || '';
        if (/^\/\//i.test(baseUrl)) {
            baseUrl = 'http:' + baseUrl;
        }
        if (isValidUrl(baseUrl)) {
            result = baseUrl;
        }
    }
    return result;
}
exports.extractBaseUrl = extractBaseUrl;
/**
 * Extract Open Graph properties from headers of a DOM.
 * @param doc DOM to process
 * @returns Open Graph properties
 */
function extractOpenGraphProps(doc) {
    const result = {};
    if (!doc.head) {
        return result;
    }
    const $metas = Array.from(doc.head.getElementsByTagName('meta'));
    for (const $meta of $metas) {
        const attr = $meta.getAttribute('property');
        if (attr !== null && attr.startsWith('og:')) {
            const prop = attr.substr(3);
            result[prop] = $meta.getAttribute('content');
        }
        if (!isValidUrl(result.url)) {
            result.url = null;
        }
    }
    return result;
}
exports.extractOpenGraphProps = extractOpenGraphProps;
/**
 * Extract all images from a DOM.
 * @param doc DOM to process
 * @param illustration if provided, the illustration is added to the result
 * @returns array of image meta data
 */
function extractImages(doc, illustration) {
    const result = [];
    if (illustration) {
        // Add document Open Graph illustration in first position
        // This in order to be the document illustration.
        result.push({
            src: illustration,
            contentType: mime.lookup(illustration) || '',
        });
    }
    const $images = Array.from(doc.getElementsByTagName('img'));
    for (const $img of $images) {
        if ($img.hasAttribute('src')) {
            const src = $img.getAttribute('src');
            if (src && !/^data:/i.test(src)) {
                result.push({
                    src,
                    contentType: mime.lookup(src) || '',
                });
            }
        }
    }
    return result;
}
exports.extractImages = extractImages;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLGlEQUFrQztBQUNsQyw2QkFBeUI7QUFFekIsTUFBTSxVQUFVLEdBQUcsQ0FBQyxHQUFXLEVBQUUsRUFBRTtJQUNqQyxJQUFJO1FBQ0YsTUFBTyxDQUFDLEdBQUcsSUFBSSxTQUFHLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDdkIsT0FBTyxDQUFDLENBQUMsUUFBUSxLQUFLLE9BQU8sSUFBSSxDQUFDLENBQUMsUUFBUSxLQUFLLFFBQVEsQ0FBQTtLQUN6RDtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsT0FBTyxLQUFLLENBQUE7S0FDYjtBQUNILENBQUMsQ0FBQTtBQUVEOzs7R0FHRztBQUNVLFFBQUEsYUFBYSxHQUFHLENBQUMsSUFBYSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxLQUFLLENBQUMsQ0FBQTtBQUVuRTs7OztHQUlHO0FBQ0gsU0FBZ0IsY0FBYyxDQUFDLEdBQWE7SUFDMUMsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFBO0lBQ2pCLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFO1FBQ2IsT0FBTyxNQUFNLENBQUE7S0FDZDtJQUNELE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDdEQsSUFBSSxLQUFLLElBQUksS0FBSyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUN2QyxJQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQTtRQUM5QyxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDMUIsT0FBTyxHQUFHLE9BQU8sR0FBRyxPQUFPLENBQUE7U0FDNUI7UUFDRCxJQUFJLFVBQVUsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUN2QixNQUFNLEdBQUcsT0FBTyxDQUFBO1NBQ2pCO0tBQ0Y7SUFDRCxPQUFPLE1BQU0sQ0FBQTtBQUNmLENBQUM7QUFoQkQsd0NBZ0JDO0FBT0Q7Ozs7R0FJRztBQUNILFNBQWdCLHFCQUFxQixDQUFDLEdBQWE7SUFDakQsTUFBTSxNQUFNLEdBQW1CLEVBQUUsQ0FBQTtJQUNqQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRTtRQUNiLE9BQU8sTUFBTSxDQUFBO0tBQ2Q7SUFDRCxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQTtJQUNoRSxLQUFLLE1BQU0sS0FBSyxJQUFJLE1BQU0sRUFBRTtRQUMxQixNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQzNDLElBQUksSUFBSSxLQUFLLElBQUksSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzNDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDM0IsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUE7U0FDN0M7UUFDRCxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUMzQixNQUFNLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQTtTQUNsQjtLQUNGO0lBQ0QsT0FBTyxNQUFNLENBQUE7QUFDZixDQUFDO0FBakJELHNEQWlCQztBQU9EOzs7OztHQUtHO0FBQ0gsU0FBZ0IsYUFBYSxDQUFDLEdBQWEsRUFBRSxZQUFxQjtJQUNoRSxNQUFNLE1BQU0sR0FBZ0IsRUFBRSxDQUFBO0lBQzlCLElBQUksWUFBWSxFQUFFO1FBQ2hCLHlEQUF5RDtRQUN6RCxpREFBaUQ7UUFDakQsTUFBTSxDQUFDLElBQUksQ0FBQztZQUNWLEdBQUcsRUFBRSxZQUFZO1lBQ2pCLFdBQVcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUU7U0FDN0MsQ0FBQyxDQUFBO0tBQ0g7SUFDRCxNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO0lBQzNELEtBQUssTUFBTSxJQUFJLElBQUksT0FBTyxFQUFFO1FBQzFCLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUM1QixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFBO1lBQ3BDLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDL0IsTUFBTSxDQUFDLElBQUksQ0FBQztvQkFDVixHQUFHO29CQUNILFdBQVcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUU7aUJBQ3BDLENBQUMsQ0FBQTthQUNIO1NBQ0Y7S0FDRjtJQUNELE9BQU8sTUFBTSxDQUFBO0FBQ2YsQ0FBQztBQXZCRCxzQ0F1QkMifQ==